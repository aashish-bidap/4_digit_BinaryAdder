# -*- coding: utf-8 -*-
"""Week3_NeuralNet_BinaryAdder.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12mapCuxjjul7N4ayIsNWDvCUHGEMfuAu
"""

from keras import models
from keras import layers
import tensorflow as tf
from tensorflow import keras
from sklearn.model_selection import train_test_split
import pandas as pd
import numpy as np
from keras.callbacks import EarlyStopping
from keras import backend as K
from matplotlib import pyplot as plt

class binaryaddition:
  def __init__(self):
    pass

  def file_input(self):
    data = pd.read_csv("/content/drive/My Drive/Neural Nets Assignment/adder_data.csv")
    return data
  
  def data_preprocessing(self,dataset):
    dataset = dataset.values
    X = dataset[:,0:8]
    y = dataset[:,8:13]

    #splitting of data
    X_train, X_test, y_train, y_test = train_test_split(X, y, train_size=0.75,test_size=0.25, random_state=101)
    return X_train, X_test, y_train, y_test

  #zero hidden layers 
  def NN_arch1(self,lrate=0.001):
    #one input one output #zero hidden layers
    model = models.Sequential()
    model.add(layers.Dense(8,input_dim = 8, activation='relu'))
    model.add(layers.Dense(5, activation='sigmoid'))
    opt = keras.optimizers.Adam(lr=lrate)
    model.compile(optimizer=opt,loss='binary_crossentropy',metrics=['accuracy'])
    return model

  #1 hidden layer with a sigmoid activation
  def NN_arch2(self,lrate=0.001):
    #1 hidden layer with a sigmoid activation
    model = models.Sequential()
    model.add(layers.Dense(8,input_dim = 8, activation='sigmoid'))
    model.add(layers.Dense(8, activation='sigmoid'))
    model.add(layers.Dense(5, activation='sigmoid'))
    opt = keras.optimizers.Adam(lr=lrate)
    model.compile(optimizer=opt,loss='binary_crossentropy',metrics=['accuracy'])
    return model

  #1 hidden layer with a relu activation
  def NN_arch3(self,lrate=0.001):
    #1 hidden layer with a relu activation
    model = models.Sequential()
    model.add(layers.Dense(8,input_dim = 8, activation='relu'))
    model.add(layers.Dense(6, activation='relu'))
    model.add(layers.Dense(5, activation='sigmoid'))
    opt = keras.optimizers.Adam(lr=lrate)
    model.compile(optimizer=opt,loss='binary_crossentropy',metrics=['accuracy'])
    return model
  
  #2 hidden layer with a relu activation
  def NN_arch4(self,lrate=0.001):
    #2 hidden layer with a relu activation
    model = models.Sequential()
    model.add(layers.Dense(8,input_dim = 8, activation='relu'))
    model.add(layers.Dense(7, activation='relu'))
    model.add(layers.Dense(7, activation='relu'))
    model.add(layers.Dense(5, activation='sigmoid'))
    opt = tf.keras.optimizers.Adam(lr=lrate)
    model.compile(optimizer=opt,loss='binary_crossentropy',metrics=['accuracy'])
    return model

  
  def model_fit(self,model,epoch_val=50):
    callbacks = EarlyStopping(monitor='val_loss',mode='min',patience=3)
    model.fit(X_train, y_train, epochs=epoch_val,batch_size=32)
    val_loss, val_acc = model.evaluate(X_test,y_test)
    print(val_loss, val_acc)
    return val_loss,val_acc

  def predicted(self,prediction):
    for i in prediction:
      print("")
      for j in i:
        if j > 0.5:
          print(1," ",end="")
        else:
          print(0," ",end="")

  def history_plot(self,history):
    training_loss = history.history['loss']
    test_loss = history.history['val_loss']

    training_acc = history.history['accuracy']
    test_acc = history.history['val_accuracy']

    # Create count of the number of epochs
    epoch_count = range(1, len(training_loss) + 1)

    # Visualize loss history
    plt.figure(figsize=(5,3))

    plt.plot(epoch_count, training_loss, 'r--')
    plt.plot(epoch_count, test_loss, 'b-')
    plt.legend(['Training Loss', 'Test Loss'])
    plt.xlabel('Epoch')
    plt.ylabel('Loss')
    plt.show()

    #Visualize accuracy history
    plt.plot(epoch_count, training_acc, 'r--')
    plt.plot(epoch_count, test_acc, 'b-')
    plt.legend(['Training acc', 'Test acc'])
    plt.xlabel('Epoch')
    plt.ylabel('Acc')
    plt.show();

learner = binaryaddition()

data = learner.file_input()

X_train, X_test, y_train, y_test = learner.data_preprocessing(data)

"""Model Execution for a zero hidden layer<br>
Epoch - 200
<br>
Learning Rate = 0.001<br>
Input Layer Sigmoid Input<br>
No Hidden Layer<br>
Output Layer Sigmoid Output
"""

model = learner.NN_arch1()
#print("Learning rate before second fit:", model.optimizer.learning_rate.numpy())
val_loss,val_acc = learner.model_fit(model,200)
history = model.fit(X_train,y_train,epochs=200,verbose=0,validation_data=(X_test, y_test)) 
learner.history_plot(history)

"""Model Execution for a zero hidden layer<br>
Epoch - 200
<br>
Learning Rate = 0.001<br>
Input Layer Sigmoid Input <br>
One Hidden Layer<br>
Output Layer Sigmoid Output
"""

model = learner.NN_arch2()
#print("Learning rate before second fit:", model.optimizer.learning_rate.numpy())
val_loss,val_acc = learner.model_fit(model,200)
history = model.fit(X_train,y_train,epochs=200,verbose=0, validation_data=(X_test, y_test)) # Data for evaluation
learner.history_plot(history)

"""Model Execution for a one hidden layer<br>
Epoch - 200
<br>
Learning Rate = 0.001<br>
Input Layer ReLU Input<br>
One Hidden Layer ReLU Input<br>
Output Layer Sigmoid Output<br>
"""

model = learner.NN_arch3()
#print("Learning rate before second fit:", model.optimizer.learning_rate.numpy())
val_loss,val_acc = learner.model_fit(model,200)
history = model.fit(X_train,y_train,epochs=200,verbose=0, validation_data=(X_test, y_test)) # Data for evaluation
learner.history_plot(history)

"""Model Execution for a one hidden layer<br>
Epoch - 200
<br>
Learning Rate = 0.001<br>
Input Layer: ReLU Input<br>
One Hidden Layer - ReLU Input <br>
One Hidden Layer - ReLU Input <br>
Output Layer Sigmoid Output<br>
"""

model = learner.NN_arch4()
val_loss,val_acc = learner.model_fit(model,200)
history = model.fit(X_train,y_train,epochs=200,verbose=0, validation_data=(X_test, y_test)) # Data for evaluation
learner.history_plot(history)

"""Model Execution for a two hidden layer Neural Net<br>
Epoch - 700
<br>
Learning Rate = 0.001<br>
Input Layer: ReLU Input<br>
One Hidden Layer - ReLU Input <br>
One Hidden Layer - ReLU Input <br>
Output Layer Sigmoid Output<br>
"""

model = learner.NN_arch4()
#print("Learning rate before second fit:", model.optimizer.learning_rate.numpy())
val_loss,val_acc = learner.model_fit(model,700)
history = model.fit(X_train,y_train,epochs=700,verbose=0, validation_data=(X_test, y_test)) # Data for evaluation
learner.history_plot(history)

"""A good Accuracy is observed above but a constant flucuation in the in the test accuracy is observed
<br>
Thus tuning the same model with different Learning rates.
<br>

Model Execution for a two hidden layer Neural Net<br>
Epoch - 700
<br>
learning_rates = [1E-1, 1E-2, 1E-3, 1E-4, 1E-5]<br>
learning_rates = [0.008,0.0085,0.0090,0.0095,0.010,0.015]
<br>
-Input Layer: ReLU Input<br>
One Hidden Layer - ReLU Input <br>
One Hidden Layer - ReLU Input <br>
-Output Layer Sigmoid Output<br>
"""

from tensorflow import keras

#learning_rates = [1E-1, 1E-2, 1E-3, 1E-4, 1E-5]
learning_rates = [0.008,0.0085,0.0090,0.0095,0.010,0.015]
for i in range(len(learning_rates)):
  print("Learning Rate:",learning_rates[i])
  model = learner.NN_arch4(learning_rates[i])
  #val_loss,val_acc = learner.model_fit(model,200)
  history = model.fit(X_train,y_train,epochs=700, verbose=0,validation_data=(X_test, y_test))
  learner.history_plot(history)
  print("------------**_**---------------")

"""Model Execution for a two hidden layer Neural Net<br>
Epoch - 700<br>
Learning Rate = 0.0091 <br>
-Input Layer: ReLU Input <br>
One Hidden Layer - ReLU Input<br>
One Hidden Layer - ReLU Input<br>
-Output Layer Sigmoid Output<br>
"""

model = learner.NN_arch4(0.0091)
val_loss,val_acc = learner.model_fit(model,700)

print(val_loss,val_acc)

# Calling `save('my_model')` creates a SavedModel folder `my_model`.
model.save("/content/drive/My Drive/Neural Nets Assignment/binary_adder_model_updated_V1")

# It can be used to reconstruct the model identically.
reconstructed_model = keras.models.load_model("/content/drive/My Drive/Neural Nets Assignment/binary_adder_model_updated_V1")

"""Making Prediction for the New Binary Number:

Addition of <br>
1 1 0 0 <br>
+<br>
1 0 1 0<br>
________________
1  0  1  1  0
"""

list = [1,1,0,0,1,0,1,0]
a = pd.DataFrame(list).T

pred = reconstructed_model.predict([a.iloc[:,0:8]])

learner.predicted(pred)

